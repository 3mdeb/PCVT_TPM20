#!/bin/bash
# Workflow for generating platform certificate from XML files 

BLUE='\033[1;34m'
NC='\033[0m'
GREEN='\033[1;32m'
RED='\033[1;31m'

zz="0"

while [[ $# > 0 ]]
do
key="$1"

case $key in
    -zz)
    zz="1"
    ;;
    -xcommon)
    xcommon="$2"
    shift
    ;;
    -xek)
    xek="$2"
    shift
    ;;
    -xplat)
    xplat="$2"
    shift
    ;;
    -privkey)
    privkey="$2"
    shift
    ;;
    -out)
    out="$2"
    shift
    ;;
    -der)
    format="-der"
    shift
    ;;
    -v)
    v="-v"
    ;;

    *)
            # unknown option
    ;;
esac
shift # past argument or value
done

# Test legitimate combinations


valid=1

# at least one input xml file is required

if [ -z "$xcommon" ] && [ -z "$xek" ] && [ -z "$xplat" ]
then
  valid=0
fi

# output file name is required
if [ -z "$out" ]
then
  valid=0
fi

if [ $valid == 0 ]
then
  echo "$0: Generate a Platform Certificate from (combining) information input in XML formatted file(s)"
  echo "Usage: $0 [OPTIONS]"
  echo "OPTIONS:"
  echo "          -xcommon <filename>  XML file containing information common accross platforms"
  echo "                               (at least one of -xcommon, -xek, -xplat is required)"
  echo "          -xek <filename>      XML file containing information contained in the Endorsement Key"
  echo "                               (The intended for EKIssuer, EKCertSerialNumber - which go into Holder field"
  echo "                                This file will typically be auto-generated by another tool in this toolset from the EK Cert in the TPM)"
  echo "                               (at least one of -xcommon, -xek, -xplat is required)"
  echo "          -xplat <filename>    XML file containing information specific to this platform"
  echo "                               (at least one of -xcommon, -xek, -xplat is required)"
  echo "          -privkey <filename>  Signing private key for generated certificate"
  echo "                               (If this is not present the Platform Certificate will be signed with a default generic key)"
  echo "          -out <filename>      Output Platform Certificate file name (REQUIRED)"
  echo "          -der		       Output file will be in DER format if present, otherwise output will be in PEM format"
  echo "          -v                   (Verbose  mode)"
  exit
  

else
  
  # Get working directory
  DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  
  # Show options
  #echo "Options selected:"
  #echo "xcommon: $xcommon"
  #echo "xplat: $xplat"
  #echo "privkey: $privkey"
  #echo "out: $out"
  #echo "der: $der"
  #echo "v: $v"
  
  # Create the optional command line arguments 
  opt_cmd_line=""
  if [ -n "$xcommon" ]
  then
    opt_cmd_line="$opt_cmd_line -c=$xcommon"
  fi

  if [ -n "$xplat" ]
  then
    opt_cmd_line="$opt_cmd_line -p=$xplat"
  fi

  if [ -n "$xek" ]
  then
    opt_cmd_line="$opt_cmd_line -e=$xek"
  fi

  if [ -n "$privkey" ]
  then
    opt_cmd_line="$opt_cmd_line -k=$privkey"
  fi

  # Generate the platform certificate
  >&2 echo " "
  >&2 printf "${BLUE}Generating Platform Certificate from input XML files${NC}\n"
  >&2 echo "java -cp $DIR/tpm20VerificationToolset1.1.jar:$DIR/lib/* com.trustiphi.tpm2verification.PlatformCertFromXml $opt_cmd_line -o=$out $der $v"
  (java -cp $DIR/tpm20VerificationToolset1.1.jar:$DIR/lib/* com.trustiphi.tpm2verification.PlatformCertFromXml $opt_cmd_line -o=$out $der $v)
  rc=$?
  if [  "$rc" -ne "0" ]
  then
    >&2 printf "${RED}Failed to generate Platform Certificate $out ${NC}\n"
    exit $rc
  else
    >&2 printf "${GREEN}Successfully generated Platform Certificate $out ${NC}\n"
  fi

fi
